#!/usr/bin/env perl
use 5.014;
use warnings;
use utf8;
use List::Util qw( min max sum );
use open qw( :std :utf8 );

our $VERSION = '1.00';

use Getopt::Long '2.33', qw( :config gnu_getopt );
sub podexit { require Pod::Usage; Pod::Usage::pod2usage(-exitval => 0, @_) }
GetOptions(\my %opt,
	'color|c!',
	'trim|length|l=i',
	'markers|m=s',
	'width|w=i',
	'usage|h' => sub { podexit() },
	'help'    => sub { podexit(-verbose => 2) },
) or exit 64;  # EX_USAGE
$opt{width} ||= $ENV{COLUMNS} || 80;
$opt{color} //= 1;

my @lines = readline or exit;
chomp for @lines;
my @values = map { s/^\h* ( -? [0-9]* (?:\.[0-9]+)? )//x and $1 } @lines;
my @order  = sort { $b <=> $a } grep { length } @values;
if ($opt{trim}) {
	my $trimpos = abs $opt{trim};
	length > 1 + $trimpos and substr($_, $trimpos) = 'â€¦' for @lines;
}

my $maxval = $order[0];
my $minval = min $order[-1], 0;
my $lenval = max map { length } @order;
my $len    = defined $opt{trim} && $opt{trim} < 0 ? -$opt{trim} + 2 :
	1 + max map { length } @lines;  # left padding
my $size   = ($maxval - $minval) &&
	($opt{width} - $lenval - $len) / ($maxval - $minval);  # bar multiplication

my @barmark;
if ($opt{markers} // 1) {
	sub orderpos { (($order[$_[0]] + $order[$_[0] + .5]) / 2 - $minval) * $size }
	$barmark[ (sum(@order) / @order - $minval) * $size ] = '=';  # average
	$barmark[ orderpos($#order / 2) ] = '+';  # mean
	$barmark[ -$minval * $size ] = '|' if $minval < 0;  # zero
	defined and $opt{color} and $_ = "\e[36m$_\e[0m" for @barmark;
}

for my $nr (0 .. $#lines) {
	my $val = $values[$nr];
	if (length $val) {
		my $color = !$opt{color} ? 0 :
			$val == $order[0] ? 32 : # max
			$val == $order[-1] ? 31 : # min
			90;
		printf "\e[%sm", $color if $color;
		printf "%*s", $lenval, $val;
		print "\e[0m" if $color;
	}
	printf '%-*s', $len, $lines[$nr];
	print $barmark[$_] // '-' for 1 .. (($val || 0) - $minval) * $size;
	say '';
}

__END__

=head1 NAME

graph - append bar chart to input numbers

=head1 SYNOPSIS

B<graph> [<options>] [<input>]

=head1 DESCRIPTION

Each line starting with a number is given a bar to visualise relative sizes.

=head1 OPTIONS

=over

=item --no-color

Disable colored output of values and bar markers.

=item -l, --length=[-]<size>

Trim line contents (between number and bars)
to a maximum number of characters.
The exceeding part is replaced by an abbreviation sign.

Prepend a dash (i.e. make negative) to enforce padding
regardless of encountered contents.

=item -m, --markers=

Statistical positions to indicate on bars.
Cannot be customized yet,
only disabled by providing an empty argument.

Any value enables all marker characters:

=over 2

=item B<=>

Average:
the sum of all values divided by the number of counted lines.

=item B<+>

Median:
the middle value or average between middle values.

=back

=item -w, --width=<columns>

Override the maximum number of columns to use.
Appended graphics will extend to fill up the entire screen.

=back

=head1 EXAMPLES

Commonly used after counting, such as users on the current server:

    users | sed 's/ /\n/g' | sort | uniq -c | graph

Letter frequencies in text files:

    cat /usr/share/games/fortunes/*.u8 |
    perl -CO -nE 'say for grep length, split /\PL*/, uc' |
    sort | uniq -c | graph

Memory usage of user processes:

    ps xo %mem,pid,cmd | graph -l40

Sizes (in megabytes) of all root files and directories:

    du -d0 -m * | graph

Number of HTTP requests per day:

    cat log/access.log | cut -d\  -f4 | cut -d: -f1 | uniq -c | graph

Any kind of database query with leading counts:

    echo 'SELECT count(*),schemaname FROM pg_tables GROUP BY 2' |
    psql -t | graph

Git statistics, such commit count by year:

    git log --pretty=%ci | cut -b-4 | uniq -c | graph

Or the most frequent authors:

    git shortlog -sn | graph | head -3

=head1 AUTHOR

Mischa POSLAWSKY <perl@shiar.org>

=head1 LICENSE

GPL3+.
